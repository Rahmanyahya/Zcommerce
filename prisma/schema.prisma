// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  cretedAt  DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  password        String
  name            String?        @default("")
  address         String?        @default("")
  telephoneNumber String?        @unique @default("")
  Basket          Basket?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  Review          Reviews[]
  Transactions    Transactions[]
}

model Basket {
  id            Int             @id @default(autoincrement())
  userId        Int             @unique
  user          User            @relation(fields: [userId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  ProductBasket ProductBasket[]
}

model ProductBasket {
  id        Int     @id @default(autoincrement())
  basketId  Int
  basket    Basket  @relation(fields: [basketId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stock         Int
  like          Int?            @default(0)
  sold          Int?            @default(0)
  rate          Int?            @default(0)
  category      Category
  status        ProductStatus   @default(Available)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  Media         Media[]
  Reviews       Reviews[]
  ProductBasket ProductBasket[]
  Transactions  Transactions[]
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String
  publicId  String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Reviews {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  reviewText String
  rating     Int
  status     Status
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Transactions {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  totalPrice Float
  quantity   String
  address    String
  status     Status
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

enum Category {
  Accessories
  Audio
  Cameras
  Computer
  Laptop
  Headphones
  Smart_Watch
  Smartphone
  Speaker
}

enum ProductStatus {
  Available
  Unavailable
  Soldout
}

enum Status {
  Calceled
  Approved
}
